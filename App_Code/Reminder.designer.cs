#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="nuxbox")]
public partial class ReminderDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insert_514_List(_514_List instance);
  partial void Update_514_List(_514_List instance);
  partial void Delete_514_List(_514_List instance);
  partial void Insert_514_Reminder(_514_Reminder instance);
  partial void Update_514_Reminder(_514_Reminder instance);
  partial void Delete_514_Reminder(_514_Reminder instance);
  #endregion
	
	public ReminderDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["nuxboxConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ReminderDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ReminderDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ReminderDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ReminderDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<_514_List> _514_Lists
	{
		get
		{
			return this.GetTable<_514_List>();
		}
	}
	
	public System.Data.Linq.Table<_514_Reminder> _514_Reminders
	{
		get
		{
			return this.GetTable<_514_Reminder>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[514_List]")]
public partial class _514_List : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Title;
	
	private EntitySet<_514_Reminder> @__514_Reminders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
	
	public _514_List()
	{
		this.@__514_Reminders = new EntitySet<_514_Reminder>(new Action<_514_Reminder>(this.attach__514_Reminders), new Action<_514_Reminder>(this.detach__514_Reminders));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_514_List__514_Reminder", Storage="__514_Reminders", ThisKey="Id", OtherKey="ListId")]
	public EntitySet<_514_Reminder> _514_Reminders
	{
		get
		{
			return this.@__514_Reminders;
		}
		set
		{
			this.@__514_Reminders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach__514_Reminders(_514_Reminder entity)
	{
		this.SendPropertyChanging();
		entity._514_List = this;
	}
	
	private void detach__514_Reminders(_514_Reminder entity)
	{
		this.SendPropertyChanging();
		entity._514_List = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[514_Reminder]")]
public partial class _514_Reminder : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Title;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Notes;
	
	private System.Nullable<int> _ListId;
	
	private System.Nullable<bool> _IsActive;
	
	private string _Priority;
	
	private EntityRef<_514_List> @__514_List;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnListIdChanging(System.Nullable<int> value);
    partial void OnListIdChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnPriorityChanging(string value);
    partial void OnPriorityChanged();
    #endregion
	
	public _514_Reminder()
	{
		this.@__514_List = default(EntityRef<_514_List>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListId", DbType="Int")]
	public System.Nullable<int> ListId
	{
		get
		{
			return this._ListId;
		}
		set
		{
			if ((this._ListId != value))
			{
				if (this.@__514_List.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnListIdChanging(value);
				this.SendPropertyChanging();
				this._ListId = value;
				this.SendPropertyChanged("ListId");
				this.OnListIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
	public System.Nullable<bool> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="VarChar(50)")]
	public string Priority
	{
		get
		{
			return this._Priority;
		}
		set
		{
			if ((this._Priority != value))
			{
				this.OnPriorityChanging(value);
				this.SendPropertyChanging();
				this._Priority = value;
				this.SendPropertyChanged("Priority");
				this.OnPriorityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_514_List__514_Reminder", Storage="__514_List", ThisKey="ListId", OtherKey="Id", IsForeignKey=true)]
	public _514_List _514_List
	{
		get
		{
			return this.@__514_List.Entity;
		}
		set
		{
			_514_List previousValue = this.@__514_List.Entity;
			if (((previousValue != value) 
						|| (this.@__514_List.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this.@__514_List.Entity = null;
					previousValue._514_Reminders.Remove(this);
				}
				this.@__514_List.Entity = value;
				if ((value != null))
				{
					value._514_Reminders.Add(this);
					this._ListId = value.Id;
				}
				else
				{
					this._ListId = default(Nullable<int>);
				}
				this.SendPropertyChanged("_514_List");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
